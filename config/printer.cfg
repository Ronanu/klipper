[include mainsail.cfg]
[virtual_sdcard]
path: /home/fx/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

# This file contains common pin mappings for RAMPS (v1.3 and later)
# boards. RAMPS boards typically use a firmware compiled for the AVR
# atmega2560 (though the atmega1280 is also possible).

# See docs/Config_Reference.md for a description of parameters.

[force_move]
enable_force_move: True
#   Set to true to enable FORCE_MOVE and SET_KINEMATIC_POSITION
#   extended G-Code commands. The default is false.

[printer]
kinematics: hybrid_corexy  # cartesian
max_velocity: 8000
max_accel: 10000
max_z_velocity: 8000
max_z_accel: 10000

[homing_override]
set_position_x: 0
set_position_y: 0
set_position_z: 0
gcode:

[mcu]
serial: /dev/serial/by-id/usb-FTDI_FT232R_USB_UART_A10700AN-if00-port0
baud: 250000

[stepper_x]
step_pin: PF0
dir_pin: PF1
enable_pin: !PD7
microsteps: 32
rotation_distance: 40
endstop_pin: ^!PE5
position_endstop: 0
position_max: 850
homing_speed: 50
homing_positive_dir: false

[stepper_y]
step_pin: PF6
dir_pin: PF7
enable_pin: !PF2
microsteps: 32
rotation_distance: 40
endstop_pin: ^PJ0
position_endstop: 440
position_max: 445
homing_speed: 50
homing_positive_dir: true

[stepper_y1]
step_pin: PA4
dir_pin: PA6
enable_pin: !PA2
microsteps: 32
rotation_distance: 40
#endstop_pin: ^PE4  # x+ endstop
# position_endstop: 1500
# position_max: 1550
# homing_speed: 50
# homing_positive_dir: true

[stepper_z]
step_pin: PL3
dir_pin: PL1
enable_pin: !PK0
microsteps: 16
rotation_distance: 40
#endstop_pin: ^PD3
endstop_pin: ^PD2
position_endstop: 3000
position_max: 3050
homing_positive_dir: true

[servo my_servo]
pin: PB5
#   PWM output pin controlling the servo. This parameter must be
#   provided.
maximum_servo_angle: 180
#   The maximum angle (in degrees) that this servo can be set to. The
#   default is 180 degrees.
minimum_pulse_width: 0.0005
#   The minimum pulse width time (in seconds). This should correspond
#   with an angle of 0 degrees. The default is 0.001 seconds.
maximum_pulse_width: 0.0025
#   The maximum pulse width time (in seconds). This should correspond
#   with an angle of maximum_servo_angle. The default is 0.002
#   seconds.
initial_angle: 90
#   Initial angle (in degrees) to set the servo to. The default is to
#   not send any signal at startup.
#initial_pulse_width: 0.0015
#   Initial pulse width time (in seconds) to set the servo to. (This
#   is only valid if initial_angle is not set.) The default is to not
#   send any signal at startup.






